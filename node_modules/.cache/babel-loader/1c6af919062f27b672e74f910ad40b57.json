{"ast":null,"code":"import SortingVisualizer from\"../Sorting Visualizer/SortingVisualizer\";export function getBubbleSortAnimations(array){var animations=[];if(array.length<=1)return array;bubbleSortHelper(array,animations);return animations;}function bubbleSortHelper(array,animations){var n=array.length;for(var i=0;i<n-1;i++){for(var j=0;j<n-i-1;j++){// Push them once to change color\nanimations.push([j,j+1]);// Push them again to revert to normal\nanimations.push([j,j+1]);if(array[j]>array[j+1]){//Swap images to indicate sorting \nanimations.push([j,j+1]);var temp=array[j];array[j]=array[j+1];array[j+1]=temp;}}}return animations;}export function getInsertionSortAnimations(array){var animations=[];if(array.length<=1)return array;insertionSortHelper(array,animations);return animations;}function insertionSortHelper(array,animations){var n=array.length;for(var i=1;i<n;++i){var key=array[i];var j=i-1;animations.push([j,i]);animations.push([j,i]);while(j>=0&&array[j]>key){animations.push([j+1,j]);array[j+1]=array[j];j=j-1;}array[j+1]=key;}}export function getSelectionSortAnimations(array){var animations=[];if(array.length<=1)return array;selectionSortHelper(array,animations);return animations;}function selectionSortHelper(array,animations){var n=array.length;for(var i=0;i<n-1;i++){var min_Idx=i;for(var j=i+1;j<n;j++){animations.push([j,min_Idx]);animations.push([j,min_Idx]);if(array[j]<array[min_Idx]){min_Idx=j;}}animations.push([min_Idx,i]);var temp=array[min_Idx];array[min_Idx]=array[i];array[i]=temp;}}export function getMergeSortAnimations(array){var animations=[];if(array.length<=1)return array;var auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx)return;var middleIdx=Math.floor((startIdx+endIdx)/2);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){var k=startIdx;var i=startIdx;var j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,j]);if(auxiliaryArray[i]<=auxiliaryArray[j]){// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}else{// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}while(i<=middleIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,i]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,i]);// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i]]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([j,j]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([j,j]);// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j]]);mainArray[k++]=auxiliaryArray[j++];}}","map":{"version":3,"sources":["C:/Users/maikd/Documents/GitHub/Sorting-Visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["SortingVisualizer","getBubbleSortAnimations","array","animations","length","bubbleSortHelper","n","i","j","push","temp","getInsertionSortAnimations","insertionSortHelper","key","getSelectionSortAnimations","selectionSortHelper","min_Idx","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["import SortingVisualizer from \"../Sorting Visualizer/SortingVisualizer\";\r\n\r\nexport function getBubbleSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations)\r\n    return animations\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations){\r\n    let n = array.length;\r\n    for(let i = 0; i < n-1; i++){\r\n        for(let j = 0; j < n-i-1; j++){\r\n            // Push them once to change color\r\n            animations.push([j, j+1]);\r\n            // Push them again to revert to normal\r\n            animations.push([j, j+1]);\r\n            if (array[j] > array[j+1]){\r\n                //Swap images to indicate sorting \r\n                animations.push([j, j+1]);\r\n                let temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    insertionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction insertionSortHelper(array, animations){\r\n    let n = array.length;\r\n    for(let i = 1; i < n; ++i){\r\n        let key = array[i];\r\n        let j = i-1;\r\n        animations.push([j,i]);\r\n        animations.push([j,i]);\r\n        while(j >= 0 && array[j] > key){\r\n            animations.push([j+1,j])\r\n            array[j+1] = array[j];\r\n            j = j-1;\r\n        }\r\n        array[j+1] = key;\r\n    }\r\n}\r\n\r\nexport function getSelectionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    selectionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations){\r\n    const n = array.length;\r\n    for(let i = 0; i < n-1; i++){\r\n        let min_Idx = i;\r\n        for(let j = i+1; j < n; j++){\r\n            animations.push([j,min_Idx]);\r\n            animations.push([j,min_Idx]);\r\n            if(array[j] < array[min_Idx]){\r\n                min_Idx = j;\r\n            }\r\n        }\r\n        animations.push([min_Idx,i]);\r\n        let temp = array[min_Idx];\r\n        array[min_Idx] = array[i];\r\n        array[i] = temp;\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}