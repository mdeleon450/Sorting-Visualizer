{"ast":null,"code":"import SortingVisualizer from \"../Sorting Visualizer/SortingVisualizer\";\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nfunction bubbleSortHelper(array, animations) {\n  let n = array.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      // Push them once to change color\n      animations.push([j, j + 1]); // Push them again to revert to normal\n\n      animations.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        //Swap images to indicate sorting \n        animations.push([j, j + 1]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n  }\n\n  return animations;\n}\n\nexport function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  insertionSortHelper(array, animations);\n  return animations;\n}\n\nfunction insertionSortHelper(array, animations) {\n  let n = array.length;\n\n  for (let i = 1; i < n; ++i) {\n    let key = array[i];\n    let j = i - 1;\n    animations.push([j, i]);\n    animations.push([j, i]);\n\n    while (j >= 0 && array[j] > key) {\n      animations.push([j + 1, j]);\n      array[j + 1] = array[j];\n      j = j - 1;\n    }\n\n    array[j + 1] = key;\n  }\n}\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  selectionSortHelper(array, animations);\n  return animations;\n}\n\nfunction selectionSortHelper(array, animations) {\n  const n = array.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    let min_Idx = i;\n\n    for (let j = i + 1; j < n; j++) {\n      animations.push([j, min_Idx]);\n      animations.push([j, min_Idx]);\n\n      if (array[j] < array[min_Idx]) {\n        min_Idx = j;\n      }\n    }\n\n    animations.push([min_Idx, i]);\n    let temp = array[min_Idx];\n    array[min_Idx] = array[i];\n    array[i] = temp;\n  }\n}\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["C:/Users/maikd/Documents/GitHub/Sorting-Visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["SortingVisualizer","getBubbleSortAnimations","array","animations","length","bubbleSortHelper","n","i","j","push","temp","getInsertionSortAnimations","insertionSortHelper","key","getSelectionSortAnimations","selectionSortHelper","min_Idx","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k"],"mappings":"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","sourcesContent":["import SortingVisualizer from \"../Sorting Visualizer/SortingVisualizer\";\r\n\r\nexport function getBubbleSortAnimations(array){\r\n    const animations =[];\r\n    if(array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations)\r\n    return animations\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations){\r\n    let n = array.length;\r\n    for(let i = 0; i < n-1; i++){\r\n        for(let j = 0; j < n-i-1; j++){\r\n            // Push them once to change color\r\n            animations.push([j, j+1]);\r\n            // Push them again to revert to normal\r\n            animations.push([j, j+1]);\r\n            if (array[j] > array[j+1]){\r\n                //Swap images to indicate sorting \r\n                animations.push([j, j+1]);\r\n                let temp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    insertionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction insertionSortHelper(array, animations){\r\n    let n = array.length;\r\n    for(let i = 1; i < n; ++i){\r\n        let key = array[i];\r\n        let j = i-1;\r\n        animations.push([j,i]);\r\n        animations.push([j,i]);\r\n        while(j >= 0 && array[j] > key){\r\n            animations.push([j+1,j])\r\n            array[j+1] = array[j];\r\n            j = j-1;\r\n        }\r\n        array[j+1] = key;\r\n    }\r\n}\r\n\r\nexport function getSelectionSortAnimations(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    selectionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations){\r\n    const n = array.length;\r\n    for(let i = 0; i < n-1; i++){\r\n        let min_Idx = i;\r\n        for(let j = i+1; j < n; j++){\r\n            animations.push([j,min_Idx]);\r\n            animations.push([j,min_Idx]);\r\n            if(array[j] < array[min_Idx]){\r\n                min_Idx = j;\r\n            }\r\n        }\r\n        animations.push([min_Idx,i]);\r\n        let temp = array[min_Idx];\r\n        array[min_Idx] = array[i];\r\n        array[i] = temp;\r\n    }\r\n}\r\n\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}